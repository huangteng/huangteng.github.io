{"meta":{"title":"Learn Tech Per Day","subtitle":null,"description":null,"author":"Teng HUANG","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"set nft server and client","slug":"Nfs-Config","date":"2015-06-20T02:43:51.000Z","updated":"2020-06-14T14:33:25.625Z","comments":true,"path":"2015/06/20/Nfs-Config/","link":"","permalink":"http://yoursite.com/2015/06/20/Nfs-Config/","excerpt":"The nfs service is a convenient way to share the files between Development board and PC. It creates a shared folder between them and both sides can have the full read/write access.","text":"The nfs service is a convenient way to share the files between Development board and PC. It creates a shared folder between them and both sides can have the full read/write access. Install and configure NFS serviceServer side123huangt@laptop-pc:/# apt-get install nfs-kernel-server nfs-common portmaphuangt@laptop-pc:/# mkdir nfs_rootfs (/home/huangt/)huangt@laptop-pc:/# vim /etc/exports inside add: /home/huangt/nfs_rootfs *(rw,sync,no_root_squash)and then restart the nfs server123huangt@laptop-pc:/# exportfs -rvhuangt@laptop-pc:/# /etc/init.d/portmap restarthuangt@laptop-pc:/# /etc/init.d/nfs-kernel-server restart Client sideAuto mount on bootInstead of using some automount tools, we can add this new mount in the file /etc/fstab, the format is: 1&lt;server&gt;:&lt;/remote/export&gt;&lt;/local/directory&gt;&lt;nfs-type&gt;&lt;options&gt; 0 0 server: hostname, IP address /remote/export: the path to the exported directory /local/directory: your local mount point nfs-type: nfs for NFSv2/NFSv3 or nfs4 for NFSv4 options: options listed (comma seperated) in https://www.centos.org/docs/5/html/5.1/Deployment_Guide/s1-nfs-client-config-options.html you can use this command to check the nfs version:12root@ok335x:/# mount -v | grep /home/huangt10.42.0.1:/home/huangt/nfs_rootfs/ on /mnt type nfs (rw,relatime,vers=3,rsize=1048576,wsize=1048576,namlen=255,hard,nolock,proto=tcp,port=65535,timeo=70,retrans=3,sec=sys,local_lock=all,addr=10.42.0.1) So the vers=3 here indicates it is a NFS3 version. Then add this line in /etc/fstab: 110.42.0.1:/home/huangt/nfs_rootfs /mnt/ nfs nolock 0 0 Then restart the system, you will see that now the development board have already mounted to the NFS server. 1root@ok335x:/# ls /mnt/","categories":[],"tags":[]},{"title":"how to share wifi internet to Linux Embedded system board","slug":"Ubuntu-Network-Config","date":"2015-06-20T02:43:51.000Z","updated":"2020-06-14T14:34:47.233Z","comments":true,"path":"2015/06/20/Ubuntu-Network-Config/","link":"","permalink":"http://yoursite.com/2015/06/20/Ubuntu-Network-Config/","excerpt":"This post describes the configure procedure for Linux network settings, to achieve that the laptop can get access to the internet (through WLAN) while at the same time the development board (or any other device which has LAN port) can talk with it (ping, ftp, telnet, etc).","text":"This post describes the configure procedure for Linux network settings, to achieve that the laptop can get access to the internet (through WLAN) while at the same time the development board (or any other device which has LAN port) can talk with it (ping, ftp, telnet, etc). Configure the LAN and WLAN (general description)Configure the LAN in terminal1$ sudo nano /etc/network/interfaces Configure the WLAN to dhcp and automatic and LAN with a static ip address 1234567891011auto loiface lo inet loopback# The primary network interfaceauto wlan0iface wlan0 inet dhcp# The second eth0auto eth0iface eth0 inet staticaddress 192.168.1.73 restart the network interface1$ sudo /etc/init.d/networking restart Here if this cannot restart successfully, then try stop/start seperately, and the problem might be:12stop: Unknown instance:networking stop/waiting and even in the network application in ubuntu, the Wireless configuration is also disabled, it means that at the moment, the /etc/network/interfaces cannot correctly configure the network, here the solution is to use network manager service to configure the network:1sudo nano /etc/NetworkManager/NetworkManager.conf change the line managed=false to managed=true (normally NetworkManager does not manage interfaces that appear in /etc/network/interfaces), then restart this service:1sudo service network-manager restart Another method is you can keep managed=false, and just delete all the self-defined configurations in /etc/network/interfaces(keep the first 2 lines for the auto lo), and use the above command to restartd the network manager, because if network manager finds out that there is no configuration in the interfaces file, it will still handle the network configurations even it is set to false. In Ubuntu, I suggest that we use this method to configure the network, the Network-Manager will make less errors than setting manually on the /e/n/interfaces files, and it can automatically switch when ehternet is connected. Configure WIFI (internet access) + Ethernet (share internet access to Dev board)Here I want to keep laptop the internet access to the internet while at the same time, the laptop can also communicate with dev board through ethernet, and also make the dev board have the internet access. Why this is important ?My dev board only has ehternet port and runs kernel linux system, so it does not support usb wifi yet, and since the new module needs to be cross compiled through my laptop, so I need the communication between the laptop and dev board (only ehternet works), and I don’t want my laptop lose the internet access because of the ethernet connection. (In Ubuntu 12.04, when it detects that ehternet is connected, it will set the priority of eth0 higher than wlan0), so by default configuration, as soon as laptop has connected with dev board, the internet access is lost.In windows, I can use the bridge connection mode, in this mode, the eth0 and wlan0 will be set in the same subnet and eth0 shares the internet access of wifi. Ubuntu 12.04 does not support this function by default. If I set manually the eth0 and wlan0 in the same subnet, only one connection (internet wlan0 access or dev board eth0 access) will be available at a time (depends on the value of the metric, you can check the value by typing “ip route show” in terminal).So to achieve the goal above without using bridge mode, the subnet of wifi and the subnet of ethernet must be different. The easiest way is stil using netwwork manager to configure. Network manager configuration make sure that wlan0 has internet access connect the laptop with dev board by ethernet (if necessary restart network manager to make sure that Wired connection is active) Open “Network” application -&gt; Options -&gt; Tab IPv4 Settings In “Method” list, choose option “Shared to other computers” Then click save Restart network manager (terminal: sudo service network-manager restart) Check eth0 configuration1ip route show Here is the automatically generated eth0 configuration on my laptop 1234default via 192.168.1.254 dev wlan0 proto static 10.42.0.0/24 dev eth0 proto kernel scope link src 10.42.0.1 metric 1 169.254.0.0/16 dev wlan0 scope link metric 1000 192.168.1.0/24 dev wlan0 proto kernel scope link src 192.168.1.39 metric 2 So the eth0 is assigned to 10.42.0.1, then on the other side, the dev board should set eth0 also in the same subnet and netmask. Here I assigned eth0 in dev board to 10.42.1.75 (here you should find another way to configure the dev board, I used serial port to configure it) In /etc/network/interfaces in dev board, here is my configuration: 12345678auto loiface lo inet loopbackauto eth0iface eth0 inet staticaddress 10.42.0.75netmask 255.255.255.0gateway 10.42.0.1 Then restart the network interface in dev board1$ sudo /etc/init.d/networking restart Then it is done. Now laptop can talk to dev board (example: telnet 10.42.0.75), and the dev also have access to the internet, bingo ! 1234567891011121314151617181920212223huangt@huangt-HP-ProBook-4431s:~$ telnet 10.42.0.75Trying 10.42.0.75...Connected to 10.42.0.75.Escape character is '^]'. _____ _____ _____ _ _ __ _ __ __ | ___| / _ | _ | | | | | | | / / | |__ | | | | | |_| | | | | | | | | / / | __| | | | | | _ / | | | | | | | &#125; &#123; | | | |_| | | | | |___ | | | | | / / |_| _____/ |_| _ |_____| |_| |_| _| /_/ _ ok335x login: rootroot@ok335x:~# ping google.frPING google.fr (173.194.45.79): 56 data bytes64 bytes from 173.194.45.79: seq=0 ttl=51 time=39.767 ms^C--- google.fr ping statistics ---1 packets transmitted, 1 packets received, 0% packet lossround-trip min/avg/max = 39.767/39.767/39.767 msroot@ok335x:~#","categories":[],"tags":[]},{"title":"Character Driver Note","slug":"Char-Driver-Note","date":"1970-01-01T00:00:00.000Z","updated":"2020-06-14T14:35:08.013Z","comments":true,"path":"1970/01/01/Char-Driver-Note/","link":"","permalink":"http://yoursite.com/1970/01/01/Char-Driver-Note/","excerpt":"This post explains how a char driver is developed and used in Linux Embeded System. The reference document is from Linux Driver Development Edition 3. The example is scull driver.","text":"This post explains how a char driver is developed and used in Linux Embeded System. The reference document is from Linux Driver Development Edition 3. The example is scull driver. How to access char devicesChar devices file nodesA character devices are accessed through names in the filesystem. Those names are called special files or device files or simply nodes of the filesystem tree (located in /dev directory), as an example below: The first letter “c” represents char devices, and 251 is the major number, the next columne 0,1,2,3 to 80 is the minor number. Here all the “scull*” devices have the same major number, which means all of them are managed by the driver 251; while the minor number is used to determine exactly which “physical” device is being referred to. Method to create device filesDynamic Allocation of Major NumbersAs we know, the command “insmod” is used to install the new modules to the kernel, during kernel will assign a major number to the new drivers, the information is saved in file /proc/devices as an example below: The new device “scull”, “scullp”, “sculla” are assigned with the same major number 251. Once the major numbers are assigned to these new devices in file /proc/devices, the script “scull_load” or “scull.init” (“create_files” in function load_devices can make the device nodes and assign them with the same number). Function to obtain the device numbersHere is the scull driver example: 123456789101112/* * Get a range of minor numbers to work with, asking for a dynamic * major unless directed otherwise at load time. */if (scull_major) &#123; dev = MKDEV(scull_major, scull_minor); result = register_chrdev_region(dev, scull_nr_devs, \"scull\");&#125; else &#123; result = alloc_chrdev_region(&amp;dev, scull_minor, scull_nr_devs, \"scull\"); scull_major = MAJOR(dev);&#125; When the device number is pre-defined, this method is used to register new devices int register_chrdev_region(dev_t first, unsigned int count, char *name); first: the beggining device number of the range to allocate count: the totoal number of contiguous device numbers to request name: the name of devices When you want the device major number to be randomly allocated, this method is used: int alloc_chrdev_region(dev_t dev, unsigned int firstminor, unsigned int count, char name); *dev: output-only parameter which is used to hold the 1st number in your allocated range firstminor: the first minor number to use count and name is the same as the above method Function to unregister the devicesvoid unregister_chrdev_region(dev_t first, unsigned int count); script to create related device file nodesHere is example from scull.init script in function load_device() Step 1: extract the device major number from /proc/devices 1MAJOR=`awk \"\\\\$2==\\\"$DEVICE\\\" &#123;print \\\\$1&#125;\" /proc/devices` Step 2: create file nodes 1234567891011# function create_filescd /devlocal devlist=\"\"local filewhile true; doif [ $# -lt 2 ]; then break; fifile=\"$&#123;DEVICE&#125;$1\"mknod $file c $MAJOR $2devlist=\"$devlist $file\"shift 2done Through debugging, the parameters passed into this function is:10 0 1 1 2 2 3 3 priv 16 pipe0 32 pipe1 33 pipe2 34 pipe3 35 single 48 uid 64 wuid 80","categories":[],"tags":[{"name":"Linux driver","slug":"Linux-driver","permalink":"http://yoursite.com/tags/Linux-driver/"}]},{"title":"Hello World","slug":"hello-world","date":"1970-01-01T00:00:00.000Z","updated":"2020-06-14T14:35:26.653Z","comments":true,"path":"1970/01/01/hello-world/","link":"","permalink":"http://yoursite.com/1970/01/01/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Linux driver","slug":"Linux-driver","permalink":"http://yoursite.com/tags/Linux-driver/"}]}